
(COMANDOS BÁSICOS)
git --version (Saber la versión de Git)
git -help (Ayuda en git)
git help commit (Ayuda con comandos especificos)
(FIN COMANDOS BÁSICOS)




(CONFIGURACIONES GLOBALES)
git config --global user.name "Carlos Ortiz" (Agrega nombre de usuario)
git config --global user.email "cortizmardones@gmail.com" (Agrega correo a git)

git config --global -e (Ver la información anterior + los alias - Me abre un fichero VI <3)
git config --global -l (Aparece la info anterior sin opcion de editar)

git remote rm origin (Eliminar el repositorio remoto)
git remote add origin https://githuub/bla/bla/bla.git (Agregar un nuevo repo remoto)
git config core.autocrlf true (SOLUCIÓN CRLF)
(FIN CONFIGURACIONES GLOBALES)




(PROCESO NORMAL GIT)
git init (Inicializo el repositorio , se crea una carpeta oculta .git)

git status (Verifica que tengo por agregar al stagin area)
git status -s (Modo silencioso - trae letritas)
git status -s -b (Muestra la rama en la que estoy)

git add . (Agregar archivos al stagin area)
git add *.png (Agregar solo extensiones especificas)
git add carpeta/ (Agregar archivos dentro de carpetas/folders)

git reset nombreArchivo (Elimina archivos del staging area)
git reset *.png (Elimina solo las extensiones especificas)
git reset . (Elimina todo)

git commit -m "Comentario" (Se crea el snapshot del código y se agrega un comentario)
git commit -am "mensaje" (Para agregar al stage y commitear a la vez)
git commit --amend -m "PARA CAMBIAR EL COMENTARIO DEL ULTIMO COMMIT SI ME EQUIVOQUE"
(FIN PROCESO NORMAL GIT)




(VIAJAR EN EL TIEMPO)
git reset --soft 860c6c2 (conserva archivos - solo tendria que agregarlos de nuevo al staging y commitear)
git reset --hard 860c6c2 (Destruye los archivos- ojo con este)

git reflog (Veo todos los puntos donde hice commit in cluso si realice reset soft o hard)
(FIN VIAJAR EN EL TIEMPO)




(IGNORAR ARCHIVOS .gitignore)
(Crear un archivo en el mismo nivel que la carpeta .git llamada .gitignore)
Ejemplo:
archivo.txt (Excluir archivos individuales)
*.log (Excluir todos los archivos dependiendo de su extensión)
node_modules/ (Excluir carpetas)
(FIN IGNORAR ARCHIVOS .gitignore)




(RAMAS)
Merge: Unir ramas
fast-forward: No hubo cambios en el master y la rama secundaria con los cambios se une sin problemas.
(Se unio sin problemas ya que no existian ccommits en la rama a la cual unimos los cambios)

Union automatica : Hubo cambios en el master y la rama secundaria se une pero agregando sus
propios commit (Cada rama conserva sus propios commit.) (Es el más común)

Union manual o merge commit: Git no puede resolver y yo tengo que resolver manualmente.

git branch nombreNuevaRama (Crear una nueva rama)
git checkout -b nombreRama (Crear una nueva rama y moverme a ella)

git branch (Me muestra las ramas  - me marca en verde en la que estoy activa)
git branch -a (Muestra las ramas incluso las ocultas (origin/master))
git checkout nombreRama (Es para moverme a una rama distinta)

git diff nombreRama1 nombreRama2 (Para ver las diferencias en las ramas)

git merge rama-villanos (Para unir ramas - en este caso uni la rama master a la de villanos)
(Siempre hay que estar posicionado en la rama en la que quiero unir algo)

git branch -d nombreRama (Para eliminar las ramas - normalmente se hace despues de fusionarlas)
(FIN RAMAS)




(TAG)
git tag nombreTag (Crear tag - comentario de commit , por ejemplo para verisonamiento)
git tag -a v1.0.0 -m "Mensaje" (Crear tag con comentarios mejores)
git tag -a v0.1.0 345d7de -m "Mensaje" (Crear tag en commit anteriores)

git tag (Ver todos los tag creados)
git show v1.0.0 (Ver tag especificos)

git tag -d nombreTag 	(Borrar Tag)

git push --tags (Para subir los tags a github ya que no los sube automaticamente)
(FIN TAG)




(STASH/REBASE)
git stash (Guarda en memoria el proyecto en ese momento Y ME LLEVA AL ULTIMO COMMIT)
git stash save (Exactamente lo mismo que arriba)
git stash save "Mensaje para el stash" (Guarda en memoria el proyecto en ese momento Y ME LLEVA AL ULTIMO COMMIT pero deja un mensaje)
git stash save --keep-index (Guarda todo menos los archivos que estan en el stage)
git stash save --include- (Guarda todo incluso los archivos que git no les da seguimiento)

git stash list (Muestra todos los stash que hay en el proyecto)
git stash list --stat (Muestra todos los stah que hay en el proyecto con más detalles)
git show stash (Muestra todos los stah que hay en el proyecto incluso con más detalles)
git show stash@{0} (Muestra la información de stash especificos)

git stash pop (Traer los cambios del ultimo stash (Guardados en memoria) los aplica al proyecto y finalmente destruye el stash)
git stash apply (Traer los cambios del ultimo stash los aplica al proyecto y NO destruye el stash)
git stash apply stash@{1} (Trae los cambios del stash que yo especifique)

git stash drop (Elimina el ultimo stash creado , la posicion stash@{0})
git stash drop stash@{1} (Elimina un stash especifico)
git stash clear (Borra todos los stash - es el más destructivo de todos)
(FIN STASH/REBASE)




(GITHUB)
git remote add origin https://github.com/blablabla (Agregar repositorio remoto a git local)
(origin puiede ser cualquier nombre - por buenas practicas lo llamnan así)

git remote -v (Para ver los repositorios remotos)
git push -u origin master (-u significa especificar la rama que quiero subir y dejarla definida para en el futuro solo hacer push solo: En este caso la MASTER / origin es la rama remota)

git pull origin master (Para traer los cambios del servidor) Ojo que siempre intenta hacer un merge) Al usar git pull estas combinando git fetch + git merge.

git clone https://github.com/cortizmardones/gitUdemy.git (Clonar repositorios)
git clone https://github.com/cortizmardones/gitUdemy.git nombreProyecto (Clonar proyectos con nombre especificos en la carpeta de destino)

git fetch (Es lo mismo que un pull solo que me trae los cambios y no realiza un merge del remoto con la rama master)


Issues : Sirve para crear preguntas o hablar con los dueños de los repositorios.
Pull Request: Forma para que personas que no tienen derecho a escribir en el repositorio me mandan partes codificadas de correcciones
Projectos: Sirve para crear flujos de trabajo
Wiki: Documentación o información del repositorio.
(FIN GITHUB)




(VARIOS)
git log (Ver el historial de COMMIT que he realizado)
git log --oneline (Ver ek historial de COMMIT que he realizado en una sola linea)
git log --oneline --decorate --all --graph (historial de commit con mejoras gráficas)

(Crear Alias - Ejemplos)
git config --global alias.lg "log --oneline --decorate --all --graph"
git lg (Llamando al Alias , va a ejecutar todas las propiedades anteriores que estan delimitadas en "" en el comando anterior)

git config --global alias.s "status -s -b"
git s

(Me lleva al último commit) SALVAVIDA
git checkout -- .
git checkout -- ARCHIVO.PNG (Restaura solo un archivo)

(Ver los cambios que hice cuando vuelvo de almorzar y no se que modifique y no he hecho commit)
git diff
git diff --staged



git mv nombreAntiguo.txt nombreNuevo.txt (Cambiar nombres de los archivos)
git rm nombreArchivo.txt (Eliminar archivos del stage)
git rebase --onto master~3 master~1 master (El primer numero es el commit desde donde quiero borrar y el segundo es hasta cual quieor borrar)
(FIN VARIOS)
